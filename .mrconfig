[DEFAULT]

git_register =
    url="`LC_ALL=C git config --get remote.origin.url`" || true
    if [ -z "$url" ]; then
        case "$PWD" in
            ${HOME}/.*)
                GITHUB_REPO=`echo ${PWD#$HOME/} | sed -e 's/\//_/g'`;;
            ${HOME}/debian/*)
                GITHUB_REPO="deb_${MR_REPO}";;
            *)
                GITHUB_REPO="${MR_REPO}";;
        esac
        if [ -n "$REPO" ]; then
            GITHUB_REPO="${REPO}"
        fi
        echo "git origin url not found, creating $GITHUB_REPO at github.com"
        read -p "repo description:" GITHUB_DESC
        ssh_url="`curl -s -u 'azuwis' https://api.github.com/user/repos -d '{"name":"'$GITHUB_REPO'", "description":"'$GITHUB_DESC'"}' | awk -F'"' '/ssh_url/ {print $4}'`"
        if [ -z "$ssh_url" ]; then
            error "cannot create repo at github.com"
        else
            git remote add origin $ssh_url
            url=$ssh_url
        fi
    fi
    echo "Registering git url: $url in $MR_CONFIG"
    mr -c "$MR_CONFIG" config "`pwd`" checkout="git clone '$url' '$MR_REPO'"

git_push =
    url="`LC_ALL=C git config --get remote.origin.url`" || true
    if echo $url | grep azuwis >/dev/null 2>&1; then
        git push "$@"
    fi

git_gc = git gc "$@"

[.]
checkout = git clone 'git://github.com/azuwis/home.git' '.'

[bin]
checkout = git clone 'git://github.com/azuwis/bin.git' 'bin'

[.oh-my-zsh]
checkout = git clone 'git://github.com/robbyrussell/oh-my-zsh.git' '.oh-my-zsh'

[.pentadactyl]
checkout = git clone 'git://github.com/azuwis/.pentadactyl.git' '.pentadactyl'
chain = true

[.urxvt/ext]
checkout = git clone 'git://github.com/stepb/urxvt-tabbedex.git' 'ext'

[.asciidoc/backends/dzslides]
checkout = git clone 'git://github.com/mojavelinux/asciidoc-dzslides-backend.git' 'dzslides'

[.asciidoc/backends/dzslides/dzslides]
checkout = git clone 'git://github.com/mojavelinux/dzslides.git' 'dzslides'

[.config/awesome]
checkout = git clone 'git://github.com/azuwis/.config_awesome.git' 'awesome'

[.config/awesome/eminent]
checkout = git clone 'git://git.glacicle.org/awesome/eminent.git' 'eminent'

[.vim]
checkout = git clone 'git://github.com/azuwis/.vim.git' '.vim'
chain = true

[.instpkg]
lib =
    instpkg() {
        aptitude --disable-columns --display-format "%p - %d" search '~i !~M !~prequired !~pimportant'
    }
checkout = mkdir "$MR_REPO" && instpkg > "${MR_REPO}/list"
status = :
update = instpkg > list
fetch = :
