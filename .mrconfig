[DEFAULT]

git_register = 
	url="`LC_ALL=C git config --get remote.origin.url`" || true
	if [ -z "$url" ]; then
	    case "$PWD" in
	        ${HOME}/.*)
	            GITHUB_REPO=`echo ${PWD#$HOME/} | sed -e 's/\//_/g'`;;
	        ${HOME}/debian/*)
	            GITHUB_REPO="deb_${MR_REPO}";;
	        *)
	            GITHUB_REPO="${MR_REPO}";;
	    esac
	    if [ -n "$REPO" ]; then
	        GITHUB_REPO="${REPO}"
	    fi
	    echo "git origin url not found, creating $GITHUB_REPO at github.com"
	    read -p "repo description: " GITHUB_DESC
	    ssh_url="`curl -s -u 'azuwis' https://api.github.com/user/repos -d '{"name":"'"$GITHUB_REPO"'", "description":"'"$GITHUB_DESC"'"}' | awk -F'"' '/git_url/ {print $4}'`"
	    if [ -z "$ssh_url" ]; then
	        error "cannot create repo at github.com"
	    else
	        git remote add origin $ssh_url
	        url=$ssh_url
	    fi
	fi
	echo "Registering git url: $url in $MR_CONFIG"
	mr -c "$MR_CONFIG" config "`pwd`" checkout="git clone '$url' '$MR_REPO'"

git_push = 
	url="`LC_ALL=C git config --get remote.origin.url`" || true
	if echo $url | grep azuwis >/dev/null 2>&1; then
	    git push "$@"
	fi

git_fork = 
	UPST=`git config --get remote.origin.url`
	if ! echo $UPST | grep azuwis >/dev/null 2>&1; then
	    ORIG=`echo $UPST | sed -e 's/\(.*github\.com\/\)[^/]\+\(\/.*\)/\1azuwis\2/'`
	    echo "forking $UPST ..."
	    curl -s -X POST -u 'azuwis' `echo $UPST | sed -e 's/git:\/\/github\.com/https:\/\/api\.github.com\/repos/' -e 's/\.git$/\/forks/'` | awk -F'"' '/git_url/ {print $4}' | head -n1
	    git remote set-url origin $ORIG
	    git remote add upstream $UPST
	    BASE_REPO=`basename $MR_REPO`
	    mr -c "$MR_CONFIG" config "`pwd`" checkout="git clone '$ORIG' '$BASE_REPO'; git remote add upstream '$UPST'"
	fi

git_update = 
	git pull "$@"
	url=`git config --get remote.upstream.url` || true
	if [ x"$url" != x ]; then
	    git fetch upstream
	    git merge upstream/`git rev-parse --abbrev-ref HEAD`
	fi

git_gc = git gc "$@"

[.]
checkout = git clone 'git://github.com/azuwis/home.git' '.'

[bin]
checkout = git clone 'git://github.com/azuwis/bin.git' 'bin'

[.oh-my-zsh]
checkout = git clone 'git://github.com/robbyrussell/oh-my-zsh.git' '.oh-my-zsh'

[.oh-my-zsh/custom/powerline-theme]
checkout = 
	git clone 'git://github.com/azuwis/oh-my-zsh-powerline-theme.git' 'powerline-theme'
	git remote add upstream 'git://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme.git'
	ln -s powerline-theme/powerline.zsh-theme .

[.pentadactyl]
checkout = git clone 'git://github.com/azuwis/.pentadactyl.git' '.pentadactyl'
chain = true

[.urxvt/ext]
checkout = git clone 'git://github.com/stepb/urxvt-tabbedex.git' 'ext'

[.asciidoc/backends/dzslides]
checkout = git clone 'git://github.com/mojavelinux/asciidoc-dzslides-backend.git' 'dzslides'

[.asciidoc/backends/dzslides/dzslides]
checkout = git clone 'git://github.com/mojavelinux/dzslides.git' 'dzslides'

[.config/awesome]
checkout = git clone 'git://github.com/azuwis/.config_awesome.git' 'awesome'

[.config/awesome/eminent]
checkout = git clone 'git://git.glacicle.org/awesome/eminent.git' 'eminent'

[.vim]
checkout = git clone 'git://github.com/azuwis/.vim.git' '.vim'
chain = true

[.instpkg]
lib = 
	instpkg() {
	    aptitude --disable-columns --display-format "%p - %d" search '~i !~M !~prequired !~pimportant'
	}
checkout = mkdir "$MR_REPO" && instpkg > "${MR_REPO}/list"
status = :
update = instpkg > list
fetch = :
push = :
