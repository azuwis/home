" Vim-plug Start {{{1
let s:vimplug = expand('~/.vim/autoload/plug.vim')
let s:vimplug_src = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
if has('vim_starting')
  if !filereadable(s:vimplug)
    let s:autoload_dir = expand('~/.vim/autoload/')
    if !isdirectory(s:autoload_dir)
        call mkdir(s:autoload_dir)
    endif
    let s:installplug = 'wget -q -O ' . s:vimplug . ' ' . s:vimplug_src
    echomsg 'Install vim-plug: ' . s:installplug
    call system(s:installplug)
    "autocmd VimEnter * PlugInstall
  endif
endif
call plug#begin('~/.vim/plugged')

" Sensible {{{1
" https://github.com/tpope/vim-sensible
set nocompatible
set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab

set nrformats-=octal

set ttimeout
set ttimeoutlen=100

set incsearch

set laststatus=2
set ruler
set showcmd
set wildmenu

set scrolloff=3
set sidescrolloff=5
set display+=lastline

set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

setglobal tags-=./tags tags^=./tags;

set autoread
set fileformats+=mac

set history=1000
set tabpagemax=50
set viminfo^=!
set sessionoptions-=options

runtime! macros/matchit.vim

inoremap <C-U> <C-G>u<C-U>

" Options {{{1

"set showbreak=↪
"set listchars+=tab:▸\ 
"set listchars+=eol:¬
"highlight NonText guifg=#4a4a59
"highlight SpecialKey guifg=#4a4a59

set modeline
"set relativenumber
"set cursorline
set colorcolumn=80
" disable startup message
set shortmess+=I
set fileencodings=ucs-bom,utf-8,cp936,default,latin1
set ignorecase
set smartcase
set hlsearch
set wildignore=
set splitright splitbelow
set lazyredraw
" for multi-type formating
set formatoptions+=mM

" Always backup {{{2
let s:savedir = expand('~/.vim/save')
if !isdirectory(s:savedir)
  call mkdir(s:savedir, 'p', 0700)
  call mkdir(s:savedir . '/undo/')
  call mkdir(s:savedir . '/backup/')
  call mkdir(s:savedir . '/swap/')
endif
set swapfile
let &directory = s:savedir . '/swap/'
set undofile
let &undodir = s:savedir . '/undo/'
set backup
let &backupdir = s:savedir . '/backup/'

" Mappings {{{1
map Q gq
nnoremap <F5> :update<CR>
inoremap <F5> <C-o>:update<CR>
"nnoremap / /\v
"vnoremap / /\v
"nnoremap ; :
inoremap kj <ESC>
" man
"runtime ftplugin/man.vim
"nmap K <Leader>K

" Window switching {{{2
nnoremap <C-k> <C-W>k
nnoremap <C-j> <C-W>j
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" File opening {{{2
" Shortcuts for opening file in same directory as current file
cnoremap <expr> %% getcmdtype() == ':' ? escape(expand('%:h'), ' \').'/' : '%%'
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%
" Prompt to open file with same name, different extension
map <leader>er :e <C-R>=expand("%:r")."."<CR>

" Fix the & command in normal+visual modes {{{2
nnoremap & :&&<Enter>
xnoremap & :&&<Enter>

" Recall command history {{{2
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Indentation {{{1
set ts=8 sts=4 sw=4 et
" http://vimcasts.org/episodes/tabs-and-spaces/
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction
function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

" Autocmd {{{1
if has("autocmd")
  augroup vimrcEX
    autocmd!
    " space and tab
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noet
    autocmd FileType vim,yaml,html,css,ruby,eruby,sh setlocal ts=2 sts=2 sw=2 et
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noet

    " filetype specific mapping
    autocmd FileType vim nnoremap <buffer> K :h <C-r><C-w><CR>

    " no list and relativenumber for manpages
    autocmd FileType man setlocal nolist norelativenumber colorcolumn=

    " treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml

    " treat .mrconfig files as cfg, ~/.mrlib as sh
    autocmd BufNewFile,BufRead */.mrconfig setfiletype cfg
    autocmd BufNewFile,BufRead ~/.mrlib setfiletype sh

    " .adoc as asciidoc
    autocmd BufNewFile,BufRead *.adoc,*.asc setfiletype asciidoc

    " .md as markdown
    autocmd BufNewFile,BufRead *.md setfiletype markdown

    " set spell for git commit msg
    autocmd FileType gitcommit setlocal spell

    " auto save file on losing focus
    autocmd FocusLost * silent! :update

    " auto load vimrc
    autocmd BufWritePost ~/.vim/vimrc source $MYVIMRC

    " restore cursor position
    autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

    " load ~/.Xresources if modified
    autocmd BufWritePost ~/.Xresources :silent !xrdb -merge ~/.Xresources
  augroup END
endif

" Commands to quickly set >1 option in one go {{{2
command! -nargs=* Wrap set wrap linebreak nolist


if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
    \ | wincmd p | diffthis
endif

" Recipe {{{1
" Clean SRT {{{2
command! CleanSRT normal :%s/{[^}]*}//g<CR>

" Remove trailing whitespace {{{2
" http://www.bestofvim.com/tip/trailing-whitespace/
"match ErrorMsg '\s\+$'
match ErrorMsg /\s\+\%#\@<!$/
command! RTW normal :%s/\s\+$//e<CR>

" Auto create parent dir {{{2
" https://github.com/dockyard/vim-easydir
augroup easydir
  autocmd!
  autocmd BufWritePre,FileWritePre * call <SID>create_and_save_directory()
augroup END
function! <SID>create_and_save_directory()
  let s:directory = expand('<afile>:p:h')
  if !isdirectory(s:directory)
    call mkdir(s:directory, 'p')
  endif
endfunction

" General plugins {{{1

" airline
let g:airline_left_sep = ''
let g:airline_right_sep = ''
Plug 'bling/vim-airline'

" bufferline
let g:bufferline_echo = 0
Plug 'bling/vim-bufferline'

" zenburn
Plug 'jnurmine/Zenburn'

" gundo
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
map <Leader>u :UndotreeToggle<CR>

" fugitive
Plug 'tpope/vim-fugitive'

" signify
Plug 'mhinz/vim-signify'

" repeat
Plug 'tpope/vim-repeat'

" surround
Plug 'tpope/vim-surround'

" unimpaired
Plug 'tpope/vim-unimpaired'

" commentary
Plug 'tpope/vim-commentary', { 'on': '<Plug>Commentary' }
map gc <Plug>Commentary
nmap gcc <Plug>CommentaryLine

" easy-align
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign', '<Plug>(LiveEasyAlign)', 'LiveEasyAlign'] }
vmap ga <Plug>(LiveEasyAlign)
nmap ga <Plug>(LiveEasyAlign)

" easymotion
Plug 'Lokaltog/vim-easymotion', { 'on': '<Plug>(easymotion-prefix)' }
map <Leader><Leader> <Plug>(easymotion-prefix)

" syntastic
Plug 'scrooloose/syntastic', { 'for': [
      \ 'sh',
      \ 'python',
      \ 'ruby',
      \ 'vim',
      \ ]}

" neocomplete
if (has('lua') && (v:version > 703 || v:version == 703 && has('patch885')))
  let g:neocomplete#enable_at_startup = 1
  Plug 'Shougo/neocomplete.vim'
else
  let g:neocomplcache_enable_at_startup = 1
  Plug 'Shougo/neocomplcache.vim'
endif

" tagbar
if v:version >= 703
  " disable airline tagbar support, airline check if :TagbarToggle function
  " exist, but vim-plug provide a fake function, lead to exception
  let g:airline#extensions#tagbar#enabled = 0
  Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
endif

" indent-guides
Plug 'nathanaelkane/vim-indent-guides', { 'on': '<Plug>IndentGuidesToggle' }
nmap <Leader>ig <Plug>IndentGuidesToggle
if !has('gui_running')
  let g:indent_guides_auto_colors = 0
  augroup indent_guides_color
    autocmd!
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=238
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=239
  augroup END
endif

" Filetypes {{{1
" Ansible
Plug 'chase/vim-ansible-yaml', { 'for': 'yaml' }

" Vim-plug End {{{1
call plug#end()

" Ending configs {{{1
" colorscheme
try
  colorscheme zenburn
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme slate
endtry

" vim: fdm=marker
