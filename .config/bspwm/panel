#!/bin/sh

PANEL_HEIGHT=26
PANEL_FONT_FAMILY1="Sans:style=italic:size=9"
PANEL_FONT_FAMILY2="Noto Sans Mono CJK SC:slant=100:size=9"
PANEL_FONT_FAMILY3="FontAwesome:size=9"
PANEL_FIFO="${XDG_CACHE_HOME:-"$HOME/.cache"}/panel-fifo"

COLOR_FOREGROUND='#FFA3A3AB'
COLOR_BACKGROUND='#FF080808'
COLOR_ACTIVE_MONITOR_FG='#FF080808'
COLOR_ACTIVE_MONITOR_BG='#FF58C5F1'
COLOR_INACTIVE_MONITOR_FG='#FF58C5F1'
COLOR_INACTIVE_MONITOR_BG='#FF080808'
COLOR_FOCUSED_OCCUPIED_FG='#FFF6F9FF'
COLOR_FOCUSED_OCCUPIED_BG='#FF404E5E'
COLOR_FOCUSED_FREE_FG='#FFF6F9FF'
COLOR_FOCUSED_FREE_BG='#FF323A44'
COLOR_FOCUSED_URGENT_FG='#FF080808'
COLOR_FOCUSED_URGENT_BG='#FFF9A299'
COLOR_OCCUPIED_FG='#FFA3A3AB'
COLOR_OCCUPIED_BG='#FF080808'
COLOR_FREE_FG='#FF6F7277'
COLOR_FREE_BG='#FF080808'
COLOR_URGENT_FG='#FFF9A299'
COLOR_URGENT_BG='#FF080808'
COLOR_LAYOUT_FG='#FFA3A3AB'
COLOR_LAYOUT_BG='#FF080808'
COLOR_TITLE_FG='#FFA3A3AB'
COLOR_TITLE_BG='#FF080808'
COLOR_STATUS_FG='#FFA3A3AB'
COLOR_STATUS_BG='#FF080808'

if [ "$(pgrep -cx panel)" -gt 1 ] ; then
    printf "%s\n" "The panel is already running." >&2
    exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
bspc control --subscribe > "$PANEL_FIFO" &
# xtitle -sf 'T%s' > "$PANEL_FIFO" &

clock() {
    date '+ %d %b  %H:%M'
}

batt_dir="/sys/class/power_supply/BAT0"
test -e "$batt_dir" && enable_battery="true"
battery() {
    local capacity=0
    local status="Unknown"
    local icon=""
    read capacity < "${batt_dir}/capacity"
    read status < "${batt_dir}/status"
    case "$status" in
        Full)
            icon=""
            ;;
        Charging|Discharging)
            if [ "$capacity" -gt 90 ]; then
                icon=""
            elif [ "$capacity" -gt 65 ]; then
                icon=""
            elif [ "$capacity" -gt 40 ]; then
                icon=""
            elif [ "$capacity" -gt 15 ]; then
                icon=""
            else
                icon=""
            fi
            if [ x"$status" = x"Charging" ]; then
                icon="${icon} "
            fi
            ;;
    esac
    echo "${icon} ${capacity}%"
}

loadavg() {
    local loadinfo tmp
    read loadinfo tmp < /proc/loadavg
    echo " ${loadinfo}"
}

disk() {
    local diskinfo
    diskinfo="$(df --human-readable --output=avail "${HOME}" | tail -n1)"
    echo " ${diskinfo}"
}

temp_input="$(find /sys/devices/platform/coretemp.0/hwmon/hwmon?/temp?_input 2>/dev/null | head -n1)"
test x"${temp_input}" != x && enable_temp="true"
temp() {
    local tempinfo
    read tempinfo < "$temp_input"
    echo " ${tempinfo%???}°C"
}

test x"$(/sbin/iwgetid 2>/dev/null)" != x && enable_essid="true"
essid() {
    local essid
    essid="$(/sbin/iwgetid -r)"
    if [ x"$(/sbin/iwgetid)" != x ]; then
        echo " ${essid}"
    else
        enable_essid="false"
    fi
}

ifaces=$(ls /sys/class/net | grep -E '^(eth|wlan)')
last_rx=0
last_tx=0
rate=""
readable() {
    local byte=$1
    local kib=$(( byte >> 10 ))
    if [ "$kib" -gt 1024 ]; then
        local mib_int=$(( kib >> 10 ))
        local mib_dec=$(( kib % 1024 * 976 / 10000 ))
        if [ "$mib_dec" -lt 10 ]; then
            mib_dec="0${mib_dec}"
        fi
        echo "${mib_int}.${mib_dec}M"
    else
        echo "${kib}K"
    fi
}
update_rate() {
    local rx=0
    local tx=0
    for iface in $ifaces; do
        local tmp_rx
        local tmp_tx
        local stat="/sys/class/net/${iface}/statistics"
        read tmp_rx < "${stat}/rx_bytes"
        read tmp_tx < "${stat}/tx_bytes"
        rx=$(( rx + tmp_rx ))
        tx=$(( tx + tmp_tx ))
    done
    rate="$(readable $(( (rx - last_rx) / 10 )))↓ $(readable $(( (tx - last_tx) / 10 )))↑"
    last_rx=$rx
    last_tx=$tx
}

sysinfo() {
    while : ;do
        local sysinfo="S"
        update_rate
        sysinfo="${sysinfo}${rate} "
        test x"${enable_essid}" = x"true" && sysinfo="${sysinfo}$(essid) "
        test x"${enable_battery}" = x"true" && sysinfo="${sysinfo}$(battery) "
        test x"${enable_temp}" = x"true" && sysinfo="${sysinfo}$(temp) "
        sysinfo="${sysinfo} $(disk) $(loadavg) %{A:gsimplecal &:}$(clock)%{A}"
        echo "${sysinfo}"
        sleep 10
    done
}
sysinfo > "$PANEL_FIFO" &

panel_bar() {
    num_mon=$(bspc query -M | wc -l)

    while read -r line ; do
        case $line in
            S*)
                # system info
                sys_infos="%{F$COLOR_STATUS_FG}%{B$COLOR_STATUS_BG} ${line#?} %{B-}%{F-}"
                ;;
            T*)
                # xtitle output
                title="%{F$COLOR_TITLE_FG}%{B$COLOR_TITLE_BG} ${line#?} %{B-}%{F-}"
                ;;
            W*)
                # bspwm internal state
                wm_infos=""
                IFS=':'
                set -- ${line#?}
                while [ $# -gt 0 ] ; do
                    item=$1
                    name=${item#?}
                    case $item in
                        M*)
                            # active monitor
                            if [ "$num_mon" -gt 1 ] ; then
                                wm_infos="$wm_infos %{F$COLOR_ACTIVE_MONITOR_FG}%{B$COLOR_ACTIVE_MONITOR_BG} ${name} %{B-}%{F-}  "
                            fi
                            ;;
                        m*)
                            # inactive monitor
                            if [ "$num_mon" -gt 1 ] ; then
                                wm_infos="$wm_infos %{F$COLOR_INACTIVE_MONITOR_FG}%{B$COLOR_INACTIVE_MONITOR_BG} ${name} %{B-}%{F-}  "
                            fi
                            ;;
                        O*)
                            # focused occupied desktop
                            wm_infos="${wm_infos}%{F$COLOR_FOCUSED_OCCUPIED_FG}%{B$COLOR_FOCUSED_OCCUPIED_BG}%{U$COLOR_FOREGROUND}%{+u} ${name} %{-u}%{B-}%{F-}"
                            case "${name}" in
                                1) desktop='';;
                                2) desktop='';;
                                3) desktop='';;
                                4) desktop='';;
                                5) desktop='';;
                                6) desktop='';;
                                7) desktop='';;
                                8) desktop='';;
                                9) desktop='';;
                            esac
                            ;;
                        F*)
                            # focused free desktop
                            wm_infos="${wm_infos}%{F$COLOR_FOCUSED_FREE_FG}%{B$COLOR_FOCUSED_FREE_BG}%{U$COLOR_FOREGROUND}%{+u} ${name} %{-u}%{B-}%{F-}"
                            case "${name}" in
                                1) desktop='';;
                                2) desktop='';;
                                3) desktop='';;
                                4) desktop='';;
                                5) desktop='';;
                                6) desktop='';;
                                7) desktop='';;
                                8) desktop='';;
                                9) desktop='';;
                            esac
                            ;;
                        U*)
                            # focused urgent desktop
                            wm_infos="${wm_infos}%{F$COLOR_FOCUSED_URGENT_FG}%{B$COLOR_FOCUSED_URGENT_BG}%{U$COLOR_FOREGROUND}%{+u} ${name} %{-u}%{B-}%{F-}"
                            ;;
                        o*)
                            # occupied desktop
                            wm_infos="${wm_infos}%{F$COLOR_OCCUPIED_FG}%{B$COLOR_OCCUPIED_BG} %{A:bspc desktop --focus ${name}:}${name}%{A} %{B-}%{F-}"
                            ;;
                        f*)
                            # free desktop
                            wm_infos="${wm_infos}%{F$COLOR_FREE_FG}%{B$COLOR_FREE_BG} %{A:bspc desktop --focus ${name}:}${name}%{A} %{B-}%{F-}"
                            ;;
                        u*)
                            # urgent desktop
                            wm_infos="${wm_infos}%{F$COLOR_URGENT_FG}%{B$COLOR_URGENT_BG} %{A:bspc desktop --focus ${name}:}${name}%{A} %{B-}%{F-}"
                            ;;
                        L*)
                            # layout
                            # local layout
                            # if [ x"${name}" = x"T" ]; then
                            #     layout=""
                            # elif [ x"${name}" = x"M" ]; then
                            #     layout=""
                            # else
                            #     layout="${name}"
                            # fi
                            wm_infos="$wm_infos%{F$COLOR_LAYOUT_FG}%{B$COLOR_LAYOUT_BG} ${desktop} %{B-}%{F-}"
                            ;;
                    esac
                    shift
                done
                ;;
        esac
        printf "%s\n" "%{l}${wm_infos}%{c}${title}%{r}${sys_infos}"
    done
}

panel_bar < "$PANEL_FIFO" | lemonbar -g x$PANEL_HEIGHT -f "$PANEL_FONT_FAMILY1" -f "$PANEL_FONT_FAMILY2" -f "$PANEL_FONT_FAMILY3" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" | sh &

wait
