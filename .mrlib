# -*- mode: shell-script -*-

lib =
    no_cmd() {
        ! which "$1" >/dev/null 2>&1
    }
    run() {
        cmd=$1
        test -x "/usr/bin/${cmd}" && "$@" &
    }
    eg() {
        cd ${HOME} && GIT_DIR=${HOME}/.eg GIT_WORK_TREE=${HOME} git "$@"
    }
    workstation() {
        test -e ~/.ssh/id_rsa
    }
    laptop() {
        test -x /usr/bin/laptop-detect && laptop-detect
    }
    download() {
        # download <url> <file> <mode>
        set -eu
        local url="$1"
        local file="${2:--}"
        if [ x"$file" = x"-" ]; then
            file="$(basename "$url")"
        fi
        file="${MR_REPO}/${file}"
        local mode="${3:--}"
        local now="$(date +%s)"
        local mtime=0
        local cache_dir="${HOME}/.mrcache/"
        mkdir -p "$cache_dir"
        local cache_path="$(readlink -f "$file")"
        cache_path="$(echo "$cache_path" | sed 's/\//+/g')"
        cache_path="${cache_dir}/${cache_path}"
        local header_file="${cache_path}.header"
        local newer_file="${cache_path}.newer"
        local update_timestamp=0
        local etag="-"
        if [ -e "$file" ]; then
           mtime="$(stat -c %Y "$file")"
           # skip if file newer than 7 days
           if [ "$((now - mtime))" -lt 604800 ]; then
               return
           fi
        fi
        echo -n "$file| updating: "
        if [ -e "$header_file" -a -e "$file" ]; then
            etag="$(awk '/^[Ee][Tt][Aa][Gg]:/ {print $2}' "$header_file" | head -n 1 | tr -d '\r')"
        fi
        if [ ! -e "$file" ]; then
            curl --silent --fail --show-error --location \
                 --dump-header "$header_file" \
                 --output "$file" "$url"
            test "$?" -eq 0 && update_timestamp=1
        elif [ x"$etag" != x"-" ]; then
            # use etag
            curl --header "If-None-Match: $etag" \
                 --silent --fail --show-error --location \
                 --dump-header "$header_file" \
                 --output "$newer_file" "$url"
            test "$?" -eq 0 && update_timestamp=1
            # if not empty
            if [ -s "$newer_file" ]; then
                mv "$newer_file" "$file"
            fi
        else
            # use last modified
            curl --time-cond "$file" \
                 --silent --fail --show-error --location \
                 --dump-header "$header_file" \
                 --output "$file" "$url"
            test "$?" -eq 0 && update_timestamp=1
        fi
        if [ "$mtime" -ne "$(stat -c %Y "$file")" ]; then
            echo -n "updated"
            if [ x"$mode" != x"-" ]; then
                echo -n ", mode: $mode"
                chmod "$mode" "$file"
            fi
        else
            echo -n "unchanged"
        fi
        echo
        # update file timestamp if curl success
        if [ "$update_timestamp" -eq 1 ]; then
            touch "$file"
        fi
    }

# Mark as deleted
delete = mr -c "$MR_CONFIG" config "`pwd`" deleted="true"

# Push only when having unpushed commit
git_push =
    if [ $(git --no-pager log --branches --not --remotes --simplify-by-decoration --oneline | wc -l) -gt 0 ]; then
        git push "$@"
    fi

# Fetch and merge current branch if upstream remote exist
git_update =
    git pull "$@"
    url=`git config --get remote.upstream.url` || true
    if [ x"$url" != x ]; then
        git fetch upstream
        git merge upstream/`git rev-parse --abbrev-ref HEAD`
    fi

git_gc = git gc "$@"
