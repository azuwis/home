# -*- mode: shell-script -*-

lib =
    no_cmd() {
        ! which "$1" >/dev/null 2>&1
    }
    workstation() {
        which awesome >/dev/null 2>&1
    }
    download() {
        local url="$1"
        local file="$2"
        local mode="$3"
        local now="$(date +%s)"
        if [ -e "$file" ]; then
           local mtime="$(stat -c %Y "$file")"
           if [ "$((now - mtime))" -lt 86400 ]; then
               return
           fi
        fi
        echo "download $url to $file"
        curl --silent --fail --show-error --location --time-cond "$file" --output "$file" "$url"
        if [ "$?" -eq 0 ]; then
            touch "$file"
        fi
        if [ x"$mode" != x ]; then
            echo "change $file mode to $mode"
            chmod "$mode" "$file"
        fi
    }
    github_token() {
        GITHUB_OAUTH="${HOME}/.github_oauth"
        GITHUB_TOKEN=`cat "$GITHUB_OAUTH"` || true
        if ! echo -n "$GITHUB_TOKEN" | grep -qE '^[0-9a-f]{40}$'; then
            GITHUB_TOKEN="`curl -s -u "$GITHUB_USER" -d '{"scopes":["repo"],"note":"for mr"}' https://api.github.com/authorizations | awk -F'"' '/token/ {print $4}'`"
            echo "$GITHUB_TOKEN" > "$GITHUB_OAUTH"
            chmod 600 "$GITHUB_OAUTH"
        fi
        echo "$GITHUB_TOKEN"
    }

# Mark as deleted
delete = mr -c "$MR_CONFIG" config "`pwd`" deleted="true"

# Create repo at github
create =
    GITHUB_REPO="$1"
    GITHUB_DESC="$2"
    ssh_url="`curl -s -H "Authorization: token $(github_token)" https://api.github.com/user/repos -d '{"name":"'"$GITHUB_REPO"'", "description":"'"$GITHUB_DESC"'"}' | awk -F'"' '/git_url/ {print $4}'`"
    if [ -z "$ssh_url" ]; then
        error "cannot create repo at github.com"
    else
        url="`LC_ALL=C git config --get remote.origin.url`" || true
        if [ -d ".git" -a -z "$url" ]; then
            git remote add origin $ssh_url
        fi
    fi

# Create repo at github when origin remote is empty
git_register =
    url="`LC_ALL=C git config --get remote.origin.url`" || true
    if [ -z "$url" ]; then
        case "$PWD" in
            ${HOME}/.*)
                GITHUB_REPO=`echo ${PWD#$HOME/} | sed -e 's/\//_/g'`;;
            ${HOME}/debian/*)
                GITHUB_REPO="deb_${MR_REPO}";;
            *)
                GITHUB_REPO="${MR_REPO}";;
        esac
        if [ -n "$REPO" ]; then
            GITHUB_REPO="${REPO}"
        fi
        echo "git origin url not found, creating $GITHUB_REPO at github.com"
        read -p "repo description: " GITHUB_DESC
        ssh_url="`curl -s -H "Authorization: token $(github_token)" https://api.github.com/user/repos -d '{"name":"'"$GITHUB_REPO"'", "description":"'"$GITHUB_DESC"'"}' | awk -F'"' '/git_url/ {print $4}'`"
        if [ -z "$ssh_url" ]; then
            error "cannot create repo at github.com"
        else
            git remote add origin $ssh_url
            url=$ssh_url
        fi
    fi
    echo "Registering git url: $url in $MR_CONFIG"
    mr -c "$MR_CONFIG" config "`pwd`" checkout="git clone '$url' '$MR_REPO'"

# Push only when having unpushed commit
git_push =
    if git config --get remote.origin.url | grep -F "$GITHUB_USER" >/dev/null 2>&1; then
        if [ $(git --no-pager log --branches --not --remotes --simplify-by-decoration --oneline | wc -l) -gt 0 ]; then
            git push "$@"
        fi
    fi

# Fork at github, set origin remote to the fork, and upstream remote to the upstream
git_fork =
    UPST=`git config --get remote.origin.url`
    if ! echo $UPST | grep -F "$GITHUB_USER" >/dev/null 2>&1; then
        ORIG=`echo $UPST | sed -e 's/\(.*github\.com\/\)[^/]\+\(\/.*\)/\1'"$GITHUB_USER"'\2/'`
        echo "forking $UPST ..."
        curl -s -X POST -H "Authorization: token $(github_token)" `echo $UPST | sed -e 's/git:\/\/github\.com/https:\/\/api\.github.com\/repos/' -e 's/\.git$/\/forks/'` | awk -F'"' '/git_url/ {print $4}' | head -n1
        git remote set-url origin $ORIG
        git remote add upstream $UPST
        BASE_REPO=`basename $MR_REPO`
        mr -c "$MR_CONFIG" config "`pwd`" checkout="git clone '$ORIG' '$BASE_REPO'"
        mr -c "$MR_CONFIG" config "`pwd`" post_checkout="cd '$BASE_REPO' && git remote add upstream '$UPST'"
    fi

# Fetch and merge current branch if upstream remote exist
git_update =
    git pull "$@"
    url=`git config --get remote.upstream.url` || true
    if [ x"$url" != x ]; then
        git fetch upstream
        git merge upstream/`git rev-parse --abbrev-ref HEAD`
    fi

git_gc = git gc "$@"
